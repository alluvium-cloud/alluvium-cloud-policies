import "tfplan/v2" as tfplan

allManagedDisks = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.type is "azurerm_managed_disk" and
		resource_changes.mode is "managed" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"])
}

deny_undefined_encryption_settings = rule {
	all allManagedDisks as _, disks {
		keys(disks.change.after) contains "encryption_settings" and
			length(disks.change.after.encryption_settings) != 0
	}
}

deny_unencrypted_managed_disk = rule when deny_undefined_encryption_settings is true {
	all allManagedDisks as _, disks {
		all disks.change.after.encryption_settings as encryption_settings {
			encryption_settings.enabled is true
		}
	}
}

// --------------------------------------------------------
// Name:        managed-disk-encryption-is-enabled.sentinel
// Category:    Infrastructure (IaaS)
// Provider:    hashicorp/azurerm
// Resource:    azurerm_managed_disk
// Check:       encryption_settings.enabled is false
// --------------------------------------------------------
// Ensure that all `azurerm_managed_disk` resources in the
// Terraform Configuration contain an `encryption_settings`
// block and that `enabled` is set to 'true'.
// --------------------------------------------------------
main = rule {
	deny_undefined_encryption_settings and
	deny_unencrypted_managed_disk
}