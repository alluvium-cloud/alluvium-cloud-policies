import "tfplan/v2" as tfplan

aws_security_groups = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.mode is "managed" and
		resource_changes.type is "aws_security_group" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"]) and
		(resource_changes.change.after.ingress else []) is not empty
}

aws_security_group_rules = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.mode is "managed" and
		resource_changes.type is "aws_security_group_rule" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"]) and
		resource_changes.change.after.type is "ingress"
}

ssh_security_groups = filter aws_security_groups as _, asg {
	any asg.change.after.ingress as _, ingress {
		ingress.to_port is 22 or
			(ingress.from_port <= 22 and
				ingress.to_port >= 22)
	}
}

ssh_security_group_rules = filter aws_security_group_rules as _, asgr {
	asgr.change.after.to_port is 22 or
		(asgr.change.after.from_port <= 22 and
			asgr.change.after.to_port >= 22)
}

protocol_security_groups = filter aws_security_groups as _, asg {
	all asg.change.after.ingress as _, ingress {
		ingress.protocol is "-1"
	}
}

protocol_security_group_rules = filter aws_security_group_rules as _, asgr {
	asgr.change.after.protocol is "-1"
}

print("Ensure no AWS security groups allow ingress from 0.0.0.0/0 to port 22")

deny_public_ssh_security_groups = rule {
	all ssh_security_groups as _, ssg {
		all ssg.change.after.ingress as _, ingress {
			ingress.cidr_blocks not contains "0.0.0.0/0"
		}
	}
}

deny_public_ssh_security_group_rules = rule {
	all ssh_security_group_rules as _, ssgr {
		ssgr.change.after.cidr_blocks not contains "0.0.0.0/0"
	}
}

deny_all_open_protocol_security_groups = rule {
	all protocol_security_groups as _, psg {
		all psg.change.after.ingress as _, ingress {
			ingress.cidr_blocks not contains "0.0.0.0/0"
		}
	}
}

deny_all_open_protocol_security_group_rules = rule {
	all protocol_security_group_rules as _, psgr {
		psgr.change.after.cidr_blocks not contains "0.0.0.0/0"
	}
}

// --------------------------------------------------------
// Name:        deny-public-ssh-acl-rules.sentinel
// Category:    Networking
// Provider:    hashicorp/aws
// Resource:    aws_security_group
//              aws_security_group_rule
// Check:       cidr_blocks does not contain "0.0.0.0/0"
//              when port is "22" or protocl is "-1"
// --------------------------------------------------------
// Ensure no security groups allow ingress from 0.0.0.0/0
// to port 3389.
// --------------------------------------------------------
main = rule {
	deny_public_ssh_security_groups and
	deny_public_ssh_security_group_rules and
	deny_all_open_protocol_security_groups and
	deny_all_open_protocol_security_group_rules
}